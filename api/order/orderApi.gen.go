// Package order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package order

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// OrderCreatePostRequest defines model for OrderCreatePostRequest.
type OrderCreatePostRequest struct {
	OrderItems []OrderItemRequest     `json:"orderItems"`
	Shipping   ShippingAddressRequest `json:"shipping"`
}

// OrderCreatePostResponse defines model for OrderCreatePostResponse.
type OrderCreatePostResponse struct {
	// Id id of the order (uuid)
	Id string `json:"id"`
}

// OrderDetailGetResponse defines model for OrderDetailGetResponse.
type OrderDetailGetResponse struct {
	// Id id of the order
	Id         string              `json:"id"`
	OrderItems []OrderItemResponse `json:"orderItems"`

	// OrderTime order creation time (in unix millis)
	OrderTime int64                  `json:"orderTime"`
	Shipping  ShippingAddressRequest `json:"shipping"`

	// Status order status
	Status string `json:"status"`
}

// OrderItemRequest defines model for OrderItemRequest.
type OrderItemRequest struct {
	// Amount order amount
	Amount int `json:"amount" validate:"required"`

	// ProductId id of the product
	ProductId string `json:"productId" validate:"required,uuid"`
}

// OrderItemResponse defines model for OrderItemResponse.
type OrderItemResponse struct {
	// Id id of the order item
	Id string `json:"id"`

	// ProductImage product image in full accessible url
	ProductImage string `json:"productImage"`

	// ProductName product name
	ProductName string `json:"productName"`

	// ProductPrice product price
	ProductPrice int64 `json:"productPrice"`

	// Qty order quantity for this product
	Qty int `json:"qty"`
}

// OrderListGetDetail defines model for OrderListGetDetail.
type OrderListGetDetail struct {
	// Id id of the order
	Id string `json:"id"`

	// Status latest order status
	Status string `json:"status"`

	// TotalAmount total order amount
	TotalAmount int64 `json:"totalAmount"`
}

// OrderListGetResponse defines model for OrderListGetResponse.
type OrderListGetResponse struct {
	Data       []OrderListGetDetail `json:"data"`
	Pagination PaginationSchema     `json:"pagination"`
}

// OrderStatusPutRequest defines model for OrderStatusPutRequest.
type OrderStatusPutRequest struct {
	// Status order status to be updated
	Status string `json:"status" validate:"required,oneof=confirmed"`
}

// PaginationSchema defines model for PaginationSchema.
type PaginationSchema struct {
	// Page current active page
	Page int `json:"page"`

	// PageSize number of active data in the page
	PageSize int `json:"pageSize"`

	// TotalData total data available to be outputted. meaning that max page is 1000 (totalData / pageSize)
	TotalData int64 `json:"totalData"`
}

// ShippingAddressRequest defines model for ShippingAddressRequest.
type ShippingAddressRequest struct {
	// FullAddress receiver full address
	FullAddress string `json:"fullAddress" validate:"required"`

	// FullName contactable receiver full name
	FullName string `json:"fullName" validate:"required"`

	// Notes additional shipping notes
	Notes *string `json:"notes,omitempty"`

	// PhoneNumber contactable receiver phone number
	PhoneNumber string `json:"phoneNumber" validate:"required"`
}

// OrderIdPathParams defines model for OrderIdPathParams.
type OrderIdPathParams = string

// OrderListGetJSONRequestBody defines body for OrderListGet for application/json ContentType.
type OrderListGetJSONRequestBody = OrderCreatePostRequest

// OrderCreatePostJSONRequestBody defines body for OrderCreatePost for application/json ContentType.
type OrderCreatePostJSONRequestBody = OrderCreatePostRequest

// OrderStatusPutJSONRequestBody defines body for OrderStatusPut for application/json ContentType.
type OrderStatusPutJSONRequestBody = OrderStatusPutRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get order list
	// (GET /orders)
	OrderListGet(ctx echo.Context) error
	// Create new order
	// (POST /orders)
	OrderCreatePost(ctx echo.Context) error
	// Get order detail
	// (GET /orders/{order_id})
	OrderDetailGet(ctx echo.Context, orderId OrderIdPathParams) error
	// Update order status
	// (PUT /orders/{order_id}/status)
	OrderStatusPut(ctx echo.Context, orderId OrderIdPathParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OrderListGet converts echo context to params.
func (w *ServerInterfaceWrapper) OrderListGet(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"list-order"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderListGet(ctx)
	return err
}

// OrderCreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) OrderCreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"create-order"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderCreatePost(ctx)
	return err
}

// OrderDetailGet converts echo context to params.
func (w *ServerInterfaceWrapper) OrderDetailGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId OrderIdPathParams

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", ctx.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderDetailGet(ctx, orderId)
	return err
}

// OrderStatusPut converts echo context to params.
func (w *ServerInterfaceWrapper) OrderStatusPut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId OrderIdPathParams

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", ctx.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"update-order-status"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderStatusPut(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/orders", wrapper.OrderListGet)
	router.POST(baseURL+"/orders", wrapper.OrderCreatePost)
	router.GET(baseURL+"/orders/:order_id", wrapper.OrderDetailGet)
	router.PUT(baseURL+"/orders/:order_id/status", wrapper.OrderStatusPut)

}

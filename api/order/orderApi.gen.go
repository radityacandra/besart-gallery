// Package order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package order

import (
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// OrderCreatePostRequest defines model for OrderCreatePostRequest.
type OrderCreatePostRequest struct {
	OrderItems []OrderItemRequest     `json:"orderItems"`
	Shipping   ShippingAddressRequest `json:"shipping"`
}

// OrderCreatePostResponse defines model for OrderCreatePostResponse.
type OrderCreatePostResponse struct {
	// Id id of the order (uuid)
	Id string `json:"id"`
}

// OrderItemRequest defines model for OrderItemRequest.
type OrderItemRequest struct {
	// Amount order amount
	Amount int `json:"amount" validate:"required"`

	// ProductId id of the product
	ProductId string `json:"productId" validate:"required,uuid"`
}

// ShippingAddressRequest defines model for ShippingAddressRequest.
type ShippingAddressRequest struct {
	// FullAddress receiver full address
	FullAddress string `json:"fullAddress" validate:"required"`

	// FullName contactable receiver full name
	FullName string `json:"fullName" validate:"required"`

	// Notes additional shipping notes
	Notes *string `json:"notes,omitempty"`

	// PhoneNumber contactable receiver phone number
	PhoneNumber string `json:"phoneNumber" validate:"required"`
}

// OrderCreatePostJSONRequestBody defines body for OrderCreatePost for application/json ContentType.
type OrderCreatePostJSONRequestBody = OrderCreatePostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new order
	// (POST /orders)
	OrderCreatePost(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OrderCreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) OrderCreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"create-order"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderCreatePost(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/orders", wrapper.OrderCreatePost)

}

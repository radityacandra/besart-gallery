// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package product

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// ProductDetailGetResponse defines model for ProductDetailGetResponse.
type ProductDetailGetResponse struct {
	// Description Product description
	Description string `json:"description"`

	// Dimension Product dimension
	Dimension string `json:"dimension"`

	// DiscountedPrice Product discounted price
	DiscountedPrice int `json:"discountedPrice"`

	// Id id of product
	Id string `json:"id"`

	// Image Product image
	Image string `json:"image"`

	// Medium Art medium
	Medium string `json:"medium"`

	// Name Product name
	Name string `json:"name"`

	// OriginalPrice Product original price
	OriginalPrice int `json:"originalPrice"`

	// Rating Product rating
	Rating int `json:"rating"`
}

// ProductListGetResponse defines model for ProductListGetResponse.
type ProductListGetResponse = []ProductListGetResponseItem

// ProductListGetResponseItem defines model for ProductListGetResponseItem.
type ProductListGetResponseItem struct {
	// DiscountedPrice Product discounted price
	DiscountedPrice int `json:"discountedPrice"`

	// Id id of product
	Id string `json:"id"`

	// Image Product image
	Image string `json:"image"`

	// Name Product name
	Name string `json:"name"`

	// OriginalPrice Product original price
	OriginalPrice int `json:"originalPrice"`

	// Rating Product rating
	Rating int `json:"rating"`
}

// OptionalPageParam defines model for OptionalPageParam.
type OptionalPageParam = int

// ProductIdPathParams defines model for ProductIdPathParams.
type ProductIdPathParams = string

// ProductListGetParams defines parameters for ProductListGet.
type ProductListGetParams struct {
	// Page paginate result
	Page *OptionalPageParam `form:"page,omitempty" json:"page,omitempty" validate:"omitempty,gt=0"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get product listing
	// (GET /products)
	ProductListGet(ctx echo.Context, params ProductListGetParams) error
	// Get product detail
	// (GET /products/{product_id})
	ProductDetailGet(ctx echo.Context, productId ProductIdPathParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ProductListGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProductListGet(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductListGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProductListGet(ctx, params)
	return err
}

// ProductDetailGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProductDetailGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId ProductIdPathParams

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", ctx.Param("product_id"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProductDetailGet(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/products", wrapper.ProductListGet)
	router.GET(baseURL+"/products/:product_id", wrapper.ProductDetailGet)

}
